#! /usr/bin/env python3

import argparse 
import tkinter

import pylab as p

import risingsun as sun
from risingsun.gui import gui

if __name__ == "__main__":

    parser = argparse.ArgumentParser(usage="risingsun OPTIONS \n\nUse a Control a SUN-EC13 climate chamber. The script might require root privileges to access /dev/ttyUSB0 (can be avoided by setting a udev rule" )
    parser.add_argument("--npoints", help="measure n points each interval seconds",
                        default=100000, type=int)
    parser.add_argument("--device", help="Device string",
                        default="/dev/ttyUSB0", type=str)
    parser.add_argument("--interval", help="average over this measurement time",
                        default=2, type=int)
    parser.add_argument("--silent", help="suppress output",
                        default=False, action="store_true")
    parser.add_argument("--gui", help="show a graphical interface",
                        default=False, action="store_true")
    parser.add_argument("--maxpoints", help="Maximum amount of data points in the plot. Earlier values get removed",
                        default=200, type=int)
    parser.add_argument("--debug", help="Set loglevel to 10 (DEBUG)",
                        default=False, action="store_true")
    parser.add_argument("--port", help="Use port for publishing data",
                        default=9876, type=int)
    parser.add_argument("--publish", help="Open port and stream data",
                        default=False, action="store_true")
    parser.add_argument("--channel", help="Select channel if multichannel instrument",
                        default=1, type=int)
    parser.add_argument("--controller", help="Use either NI usb/gpib controller or Prologix. Set parameter to 'ni' or 'prologix'. [DEFAULT: prologix]",
                        default='prologix', type=str)

    args = parser.parse_args()

    assert (args.controller == "ni" or args.controller == "prologix"), "Need to choose either 'ni' or 'prologix' for controller argument"
    loglevel = 20 # log_info
    if args.debug:
        loglevel = 10


    #try:
    #    p.style.use("goldschmidt")
    #except:
    #    print("Can not use style file!")

    # setup an instrument and find out what it is
    #meter = SunChamber(device=args.device, loglevel=loglevel, publish=args.publish, port=args.port)
    if args.controller == 'ni':
        controller = sun.NI_GPIB_USB()
    if args.controller == 'prologix': 
        controller = sun.PrologixUsbGPIBController()
    #meter = chamber.SunChamber(publish=args.publish, port=args.port)
    chamber = sun.SunChamber(controller)
    if args.gui:
        window = tkinter.Tk()
        window.title("SUN EC-13 control")

        app = gui.SunChamberMonitoringGraphical(window, chamber, interval=args.interval,\
                                                maxpoints=args.maxpoints, loglevel=loglevel)
        window.mainloop()

    else:
        #meter = GaussMeterGU3001D(device=args.device, loglevel=loglevel, port=args.port, publish=args.publish)
        for seconds, fields in chamber.measure_continously(args.npoints, args.interval):
            if not args.silent:
                print(seconds, fields)


